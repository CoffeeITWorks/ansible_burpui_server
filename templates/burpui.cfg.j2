# Burp-UI configuration file
# @version@ - 0.6.0
# @release@ - stable
[Global]
# burp backend to load either one of 'burp1', 'burp2', 'parallel' or 'multi'.
# If you choose 'multi', you will have to declare at lease one 'Agent' section.
# If you choose 'parallel', you need to configure the [Parallel] section.
# If you choose either 'burp1' or 'burp2', you need to configure the [Burp]
# section.
# The [Burp] section is also used with the 'parallel' backend for the restoration
# process.
# You can also use whatever custom backend you like if it is located in the
# 'plugins' directory and if it implements the right interface.
backend = {{ burpui_backend }}
# authentication plugin (mandatory)
# list the misc/auth directory to see the available backends
# to disable authentication you can set "auth = none"
# you can also chain multiple backends. Example: "auth = ldap,basic"
# the order will be respected unless you manually set a higher backend priority
auth = {{ burpui_global_auth }}
# acl plugin
# list misc/acl directory to see the available backends
# default is no ACL
acl = {{ burpui_global_acl }}
# audit logger plugin (chainable, see 'auth' plugin option)
# list the misc/audit directory to see the available backends
# default is no audit log
audit = {{ burpui_global_audit }}
plugins = {{ burpui_global_plugins }}

[UI]
# refresh interval of the pages in seconds
refresh = {{ burpui_ui_refresh }}
# refresh interval of the live-monitoring page in seconds
liverefresh = {{ burpui_ui_liverefresh }}
{% for item in burpui_ui_extras %}
{{ item }}
{% endfor %}

[Production]
# storage backend for session and cache
# may be either 'default' or 'redis'
storage = {{ burpui_production_storage }}
# redis server to connect to
redis = {{ burpui_production_redis }}
# session database to use
# may also be a backend url like: redis://localhost:6379/0
# if set to 'redis', the backend url defaults to:
# redis://<redis_host>:<redis_port>/0
# where <redis_host> is the host part, and <redis_port> is the port part of
# the below "redis" setting
session = {{ burpui_production_session }}
# cache database to use
# may also be a backend url like: redis://localhost:6379/0
# if set to 'redis', the backend url defaults to:
# redis://<redis_host>:<redis_port>/1
# where <redis_host> is the host part, and <redis_port> is the port part of
# the below "redis" setting
cache = {{ burpui_production_cache }}
# whether to use celery or not
# may also be a broker url like: redis://localhost:6379/0
# if set to "true", the broker url defaults to:
# redis://<redis_host>:<redis_port>/2
# where <redis_host> is the host part, and <redis_port> is the port part of
# the above "redis" setting
celery = {{ burpui_production_celery }}
# whether to rate limit the API or not
# may also be a redis url like: redis://localhost:6379/0
# if set to "true" or "redis" or "default", the url defaults to:
# redis://<redis_host>:<redis_port>/3
# where <redis_host> is the host part, and <redis_port> is the port part of
# the above "redis" setting
# Note: the limiter only applies to the API routes
limiter = {{ burpui_production_limiter }}
# limiter ratio
# see https://flask-limiter.readthedocs.io/en/stable/#ratelimit-string
ratio = {{ burpui_production_ratio }}
# database url to store some persistent data
# none or a connect string supported by SQLAlchemy:
# http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls
# example: sqlite:////var/lib/burpui/store.db
database = {{ burpui_production_database }}
# You can change the prefix if you are behind a reverse-proxy under a custom
# root path. For example: /burpui
# You can also configure your reverse-proxy to announce the prefix through the
# 'X-Script-Name' header. In this case, the bellow prefix will be ignored in
# favour of the one announced by your reverse-proxy
# prefix option should be moved to Production section in 0.7.0+
prefix = {{ burpui_production_prefix }}
# ProxyFix - Not yet implemented in 1.0.0
# number of reverse-proxy to trust in order to retrieve some HTTP headers
# All the details can be found here:
# https://werkzeug.palletsprojects.com/en/0.15.x/middleware/proxy_fix/#module-werkzeug.middleware.proxy_fix
# num_proxies = "{{ burpui_production_num_proxies }}"
# alternatively, you can specify your own ProxyFix args.
# The default is: "{'x_proto': {num_proxies}, 'x_for': {num_proxies}, 'x_host': {num_proxies}, 'x_prefix': {num_proxies}}"
# if num_proxies > 0, else it defaults to ProxyFix defaults
# proxy_fix_args = {{ burpui_production_proxy_fix_args }}

## http://burp-ui.readthedocs.io/en/latest/advanced_usage.html#websocket
[WebSocket]
## This section contains WebSocket server specific options.
# whether to enable websocket or not
enabled = {{ burpui_websocket_enabled }}
# whether to embed the websocket server or not
# if set to "true", you should have only *one* gunicorn worker
# see here for details:
# https://flask-socketio.readthedocs.io/en/latest/#gunicorn-web-server
embedded = {{ burpui_websocket_embedded }}
# what broker to use to interact between websocket servers
# may be a redis url like: redis://localhost:6379/0
# if set to "true" or "redis" or "default", the url defaults to:
# redis://<redis_host>:<redis_port>/4
# where <redis_host> is the host part, and <redis_port> is the port part of
# the above "redis" setting
# set this to none to disable the broker
broker = {{ burpui_websocket_broker }}
# if you choose to run a dedicated websocket server (with embedded = false)
# you can specify here the websocket url. You'll need to double quote your
# string though.
# example:
# url = "document.domain + ':5001'"
url = {{ burpui_websocket_url }}
# whether to enable verbose websocket server logs or not (for development)
debug = {{ burpui_websocket_debug }}

[Security]
## This section contains some security options. Make sure you understand the
## security implications before changing these.
# list of 'root' paths allowed when sourcing files in the configuration.
# Set this to 'none' if you don't want any restrictions, keeping in mind this
# can lead to accessing sensible files. Defaults to '/etc/burp'.
# Note: you can have several paths separated by comas.
# Example: /etc/burp,/etc/burp.d
includes = {{ burpui_security_includes }}
# if files already included in config do not respect the above restriction, we
# prune them
enforce = {{ burpui_security_enforce }}
# enable certificates revocation
revoke = {{ burpui_security_revoke }}
# remember_cookie duration in days
cookietime = {{ burpui_security_cookietime }}
# whether to use a secure cookie for https or not. If set to false, cookies
# won't have the 'secure' flag.
# This setting is only useful when HTTPS is detected
scookie = {{ burpui_security_scookie }}
# application secret to secure cookies. If you don't set anything, the default
# value is 'random' which will generate a new secret after every restart of your
# application. You can also set it to 'none' although this is not recommended.
# /!\ YOU CANNOT USE THE MAGIC 'random' VALUE WHEN USING GUNICORN /!\
appsecret = {{ burpui_security_appsecret }}


[Experimental]
## This section contains some experimental features that have not been deeply
## tested yet
# enable zip64 feature. Python doc says:
# « ZIP64 extensions are disabled by default because the default zip and unzip
# commands on Unix (the InfoZIP utilities) don’t support these extensions. »
zip64 = {{ burpui_experimental_zip64 }}

{% if burpui_backend == 'burp2' or burpui_backend == 'burp1' %}
## burp specific options
[Burp]
# burp status address (can only be '127.0.0.1' or '::1')
bhost = {{ burpui_backend_bhost }}
# burp status port
bport = {{ burpui_backend_bport }}
## burp binary
burpbin = {{ burpui_backend_burpbin }}
## vss_strip binary
stripbin = {{ burpui_backend_stripbin }}
## burp client configuration file used for the restoration (Default: None)
bconfcli = {{ burpui_backend_bconfcli }}
## burp server configuration file used for the setting page
bconfsrv = {{ burpui_backend_bconfsrv }}
## temporary directory to use for restoration
tmpdir = {{ burpui_backend_tmpdir }}
## how many time to wait for the monitor to answer (in seconds)
timeout = {{ burpui_backend_timeout }}
# since burp-2.1.10, timestamps have local offsets, if we detect a burp-server
# version greater than 2.1.10 we'll suppose every backup was made with that
# version. If this is not the case, you may end-up with wrongly computed backup
# dates in the clients overview. For that reason, you can enable the
# 'deep_inspection' option which will check every backup logs in order to
# find out which server version was used.
# The drawback is this process requires some extra work that may slow-down
# burp-ui.
deep_inspection = {{ burpui_backend_deep_inspection }}
{% endif %}

{% if burpui_global_auth == 'ldap' %}
## https://burp-ui.readthedocs.io/en/stable/advanced_usage.html#ldap
## ldapauth specific options
[LDAP:AUTH]
## Backend priority. Higher is first
priority = {{ burpui_ldap_priority }}
## LDAP host
host = {{ burpui_ldap_host }}
## LDAP port
port = {{ burpui_ldap_port }}
## Encryption type to LDAP server (none, ssl or tls)
## - try tls if unsure, otherwise ssl on port 636
encryption = {{ burpui_ldap_encryption }}
## specifies if the server certificate must be validated, values can be:
##  - none (certificates are ignored)
##  - optional (not required, but validated if provided)
##  - required (required and validated)
validate = {{ burpui_ldap_validate }}
## SSL or TLS version to use, can be one of the following:
##  - SSLv2
##  - SSLv3
##  - SSLv23
##  - TLSv1
##  - TLSv1_1 (Available only with openssl version 1.0.1+, requires python 2.7.9 or higher)
version = {{ burpui_ldap_version }}
## the file containing the certificates of the certification authorities
cafile = {{ burpui_ldap_cafile }}
## Attribute to use when searching the LDAP repository
##searchattr = sAMAccountName
searchattr = {{ burpui_ldap_searchattr }}
## LDAP filter to find users in the LDAP repository
##  - {0} will be replaced by the search attribute
##  - {1} will be replaced by the login name
##filter = (&({0}={1})(burpui=1))
##filter = (&({0}={1})(|(userAccountControl=512)(userAccountControl=66048)))
## LDAP base (quotes are mandatory)
base = {{ burpui_ldap_base }}
## Binddn to list existing users (quotes are mandatory)
binddn = {{ burpui_ldap_binddn }}
## Bindpw to list existing users
bindpw = {{ burpui_ldap_bindpw }}
{% endif %}

{% if burpui_basic_enabled %}
## basicauth specific options
## Note: in case you leave this section commented, the default login/password
## is admin/admin
[BASIC:AUTH]
## Backend priority. Higher is first
priority = {{ burpui_basic_priority }}
## Allow both plain and hashed passwords
## WARNING: This will defaults to false in 0.4.0
{% for item in burpui_basic_users %}
{{ item.name }} = {{ item.password }}
{% endfor %}
{% endif %}

{% if burpui_local_enabled %}
## localauth specific options
## Note: if not running as root, then burp-ui must be run as group 'shadow' to
## allow PAM to work
[LOCAL:AUTH]
## Backend priority. Higher is first
priority = {{ burpui_local_priority }}
## List of local users allowed to login. If you don't set this setting, every 
## local user will be able to login
users = {{ burpui_local_users }}
# Minimum uid that will be allowed to login
limit = {{ burpui_local_limit }}
{% endif %}

{% if burpui_global_acl == 'basic' %}
# acl engine global options
[ACL]
# Enable extended matching rules (enabled by default)
# If the rule is a string like 'user1 = desk*', it will match any client that
# matches 'desk*' no mater what agent it is attached to.
# If it is a coma separated list of strings like 'user1 = desk*,laptop*' it
# will match the first matching rule no mater what agent it is attached to.
# If it is a dict like:
# user1 = '{"agents": ["srv*", "www*"], "clients": ["desk*", "laptop*"]}'
# It will also validate against the agent name.
extended = {{ burpui_acl_extended }}
# If you don't explicitly specify ro/rw grants, what should we assume?
assume_rw = {{ burpui_acl_assume_rw }}
# The inheritance order maters, it means depending the order you choose,
# the ACL engine won't handle the grants the same way.
# By default, ACL inherited by groups will have lower priority, unless you
# choose otherwise
inverse_inheritance = {{ burpui_acl_inverse_inheritance }}
# If you specify agents and clients separately, should we link them implicitly?
# For instance, '{"agents": ["agent1", "agent2"], "clients": ["client1", "client2"]}'
# will become: '{"agents": {"agent1": ["client1", "client2"], "agent2": ["client1", "client2"]}}'
implicit_link = {{ burpui_acl_implicit_link }}
# Enable 'legacy' behavior
# Since v0.6.0, if you don't specify the agents name explicitly, users will be
# granted on every agents where a client matches user's ACL. If you enable the
# 'legacy' behavior, you will need to specify the agents explicitly.
# Note: enabling this option will also disable the extended mode
legacy = {{ burpui_acl_legacy }}

## basicacl specific options
## Note: in case you leave this section commented, the user 'admin' will have
## access to all clients whereas other users will only see the client that have
## the same name
## https://burp-ui.readthedocs.io/en/stable/advanced_usage.html#basic-acl
[BASIC:ACL]
# Backend priority. Higher is first
priority = {{ burpui_basic_acl_priority }}
admin = {{ burpui_basic_acl_admins }}
{% for item in burpui_basic_acl_users %}
{{ item }}
{% endfor %}
{% endif %}

{% if burpui_backend == 'multi' %}
## If you set standalone to 'false', add at least one section like this per
## bui-agent
{% for item in burpui_agents %}
[Agent:{{ item.name }}]
host = {{ item.address }}
port = {{ item.port }}
password = {{ item.password }}
ssl = {{ item.ssl }}
{% endfor %}
{% endif %}

{% if burpui_global_audit == 'basic' %}
# Basic audit backend options
[BASIC:AUDIT]
# Backend priority. Higher is first
priority = {{ burpui_audit_priority }}
# debug level (CRITICAL, ERROR, WARNING, INFO, DEBUG)
# the default is the same as your global application level
level = {{ burpui_audit_level }}
# path to a file to log into
logfile = {{ burpui_audit_logfile }}
# maximum logfile size
max_bytes = {{ burpui_audit_max_bytes }}
# number of files to keep
rotate = {{ burpui_audit_rotate }}
{% endif %}
